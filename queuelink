#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node *next;
};

struct node *front = NULL;
struct node *rear = NULL;

void enqueue(int x) {
    struct node *newnode = (struct node *)malloc(sizeof(struct node));
    newnode->data = x;
    newnode->next = NULL;

    if (front == NULL && rear == NULL) {
        front = rear = newnode;
        rear->next = NULL; // Circular link
    } else {
        rear->next = newnode;
        rear = newnode;
        rear->next = NULL; // Maintain circular link
    }
}

void dequeue() {
    if (front == NULL) {
        printf("Queue is empty\n");
        return;
    }
    
    struct node *temp = front;
    
    if (front == rear) { // Only one element in the queue
        front = rear = NULL;
    } else {
        front = front->next;
        rear->next = NULL; // Maintain circular link
    }
    
    free(temp);
}

void display() {
    if (front == NULL) {
        printf("Queue is empty\n");
        return;
    }
    
    struct node *temp = front;
    printf("Queue elements: ");
    do {
        printf("%d ", temp->data);
        temp = temp->next;
    } while (temp != NULL);
    printf("\n");
}

int main() {
    int choice, x;
    char ch;

    do {
        printf("1 for enqueue, 2 for dequeue, 3 for display, 0 to exit\n");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter element to enqueue: ");
                scanf("%d", &x);
                enqueue(x);
                break;
            case 2:
                dequeue();
                break;
            case 3:
                display();
                break;
            case 4:
                exit(0);
            default:
                printf("Invalid choice\n");
        }

        printf("Press y to continue, any other key to exit: ");
        ch = getchar();
       if (ch == '\n') ch = getchar();
    } while (ch == 'y' || ch == 'Y');

    return 0;
}
